"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_client_mock_1 = require("aws-sdk-client-mock");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const client_cloudwatch_1 = require("@aws-sdk/client-cloudwatch");
const update_todo_1 = require("../../src/lambda/handlers/update-todo");
const ddbMock = (0, aws_sdk_client_mock_1.mockClient)(lib_dynamodb_1.DynamoDBDocumentClient);
const cloudWatchMock = (0, aws_sdk_client_mock_1.mockClient)(client_cloudwatch_1.CloudWatchClient);
describe('update-todo handler', () => {
    beforeEach(() => {
        ddbMock.reset();
        cloudWatchMock.reset();
        cloudWatchMock.on(client_cloudwatch_1.PutMetricDataCommand).resolves({});
    });
    it('should update todo successfully', async () => {
        const updatedTodo = {
            todoId: '123',
            title: 'Updated Todo',
            completed: true,
            updatedAt: '2025-01-01T00:00:00.000Z'
        };
        ddbMock.on(lib_dynamodb_1.UpdateCommand).resolves({ Attributes: updatedTodo });
        const event = {
            pathParameters: { id: '123' },
            body: JSON.stringify({ title: 'Updated Todo', completed: true }),
            httpMethod: 'PUT',
            path: '/todos/123'
        };
        const result = await (0, update_todo_1.handler)(event);
        expect(result.statusCode).toBe(200);
        expect(JSON.parse(result.body).success).toBe(true);
        expect(JSON.parse(result.body).data.title).toBe('Updated Todo');
        expect(ddbMock.commandCalls(lib_dynamodb_1.UpdateCommand).length).toBe(1);
    });
    it('should return 400 when id parameter is missing', async () => {
        const event = {
            pathParameters: null,
            body: JSON.stringify({ title: 'Updated Todo' }),
            httpMethod: 'PUT',
            path: '/todos/123'
        };
        const result = await (0, update_todo_1.handler)(event);
        expect(result.statusCode).toBe(400);
        expect(JSON.parse(result.body).error).toBe('MISSING_ID');
    });
    it('should return 400 when body is missing', async () => {
        const event = {
            pathParameters: { id: '123' },
            body: null,
            httpMethod: 'PUT',
            path: '/todos/123'
        };
        const result = await (0, update_todo_1.handler)(event);
        expect(result.statusCode).toBe(400);
        expect(JSON.parse(result.body).error).toBe('MISSING_BODY');
    });
    it('should return 400 when body is invalid JSON', async () => {
        const event = {
            pathParameters: { id: '123' },
            body: 'invalid json',
            httpMethod: 'PUT',
            path: '/todos/123'
        };
        const result = await (0, update_todo_1.handler)(event);
        expect(result.statusCode).toBe(400);
        expect(JSON.parse(result.body).error).toBe('INVALID_JSON');
    });
    it('should return 400 when no valid fields to update', async () => {
        const event = {
            pathParameters: { id: '123' },
            body: JSON.stringify({}),
            httpMethod: 'PUT',
            path: '/todos/123'
        };
        const result = await (0, update_todo_1.handler)(event);
        expect(result.statusCode).toBe(400);
        expect(JSON.parse(result.body).error).toBe('NO_UPDATES');
    });
    it('should return 400 when title is empty string', async () => {
        const event = {
            pathParameters: { id: '123' },
            body: JSON.stringify({ title: '' }),
            httpMethod: 'PUT',
            path: '/todos/123'
        };
        const result = await (0, update_todo_1.handler)(event);
        expect(result.statusCode).toBe(400);
        expect(JSON.parse(result.body).error).toBe('INVALID_TITLE');
    });
    it('should return 400 when completed is not boolean', async () => {
        const event = {
            pathParameters: { id: '123' },
            body: JSON.stringify({ completed: 'true' }),
            httpMethod: 'PUT',
            path: '/todos/123'
        };
        const result = await (0, update_todo_1.handler)(event);
        expect(result.statusCode).toBe(400);
        expect(JSON.parse(result.body).error).toBe('INVALID_COMPLETED');
    });
    it('should return 404 when todo not found', async () => {
        const conditionalError = new Error('The conditional request failed');
        conditionalError.name = 'ConditionalCheckFailedException';
        ddbMock.on(lib_dynamodb_1.UpdateCommand).rejects(conditionalError);
        const event = {
            pathParameters: { id: '999' },
            body: JSON.stringify({ title: 'Updated Todo' }),
            httpMethod: 'PUT',
            path: '/todos/999'
        };
        const result = await (0, update_todo_1.handler)(event);
        expect(result.statusCode).toBe(404);
        expect(JSON.parse(result.body).error).toBe('NOT_FOUND');
    });
    it('should handle DynamoDB errors', async () => {
        ddbMock.on(lib_dynamodb_1.UpdateCommand).rejects(new Error('DynamoDB Error'));
        const event = {
            pathParameters: { id: '123' },
            body: JSON.stringify({ title: 'Updated Todo' }),
            httpMethod: 'PUT',
            path: '/todos/123'
        };
        const result = await (0, update_todo_1.handler)(event);
        expect(result.statusCode).toBe(500);
        expect(JSON.parse(result.body).error).toBe('INTERNAL_ERROR');
    });
    it('should update only description', async () => {
        const updatedTodo = {
            todoId: '123',
            description: 'New description',
            updatedAt: '2025-01-01T00:00:00.000Z'
        };
        ddbMock.on(lib_dynamodb_1.UpdateCommand).resolves({ Attributes: updatedTodo });
        const event = {
            pathParameters: { id: '123' },
            body: JSON.stringify({ description: 'New description' }),
            httpMethod: 'PUT',
            path: '/todos/123'
        };
        const result = await (0, update_todo_1.handler)(event);
        expect(result.statusCode).toBe(200);
        expect(JSON.parse(result.body).success).toBe(true);
    });
});
//# sourceMappingURL=data:application/json;base64,