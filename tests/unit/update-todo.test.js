"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Set up environment first
process.env.NODE_ENV = 'test';
process.env.TABLE_NAME = 'TestTodos';
// Mock the DynamoDB and CloudWatch utilities
jest.mock('../../src/lambda/utils/dynamodb');
jest.mock('../../src/lambda/utils/cloudwatch');
const update_todo_1 = require("../../src/lambda/handlers/update-todo");
const dynamodb_1 = require("../../src/lambda/utils/dynamodb");
const cloudwatch_1 = require("../../src/lambda/utils/cloudwatch");
// Get mocked instances
const mockDynamoDb = dynamodb_1.dynamoDb;
const mockPublishMetric = cloudwatch_1.publishMetric;
describe('update-todo handler', () => {
    beforeEach(() => {
        // Reset all mocks
        jest.clearAllMocks();
        // Set up default mock behaviors
        mockPublishMetric.mockResolvedValue(undefined);
    });
    it('should update todo successfully', async () => {
        const updatedTodo = {
            todoId: '123',
            title: 'Updated Todo',
            completed: true,
            updatedAt: '2025-01-01T00:00:00.000Z'
        };
        mockDynamoDb.send.mockResolvedValueOnce({ Attributes: updatedTodo });
        const event = {
            pathParameters: { id: '123' },
            body: JSON.stringify({ title: 'Updated Todo', completed: true }),
            httpMethod: 'PUT',
            path: '/todos/123'
        };
        const result = await (0, update_todo_1.handler)(event);
        expect(result.statusCode).toBe(200);
        expect(JSON.parse(result.body).success).toBe(true);
        expect(JSON.parse(result.body).data.title).toBe('Updated Todo');
        expect(mockDynamoDb.send).toHaveBeenCalledTimes(1);
        expect(mockPublishMetric).toHaveBeenCalledWith('TodoUpdatedCount', 1);
    });
    it('should return 400 when id parameter is missing', async () => {
        const event = {
            pathParameters: null,
            body: JSON.stringify({ title: 'Updated Todo' }),
            httpMethod: 'PUT',
            path: '/todos/123'
        };
        const result = await (0, update_todo_1.handler)(event);
        expect(result.statusCode).toBe(400);
        expect(JSON.parse(result.body).error).toBe('MISSING_ID');
        expect(mockDynamoDb.send).not.toHaveBeenCalled();
    });
    it('should return 400 when body is missing', async () => {
        const event = {
            pathParameters: { id: '123' },
            body: null,
            httpMethod: 'PUT',
            path: '/todos/123'
        };
        const result = await (0, update_todo_1.handler)(event);
        expect(result.statusCode).toBe(400);
        expect(JSON.parse(result.body).error).toBe('MISSING_BODY');
        expect(mockDynamoDb.send).not.toHaveBeenCalled();
    });
    it('should return 400 when body is invalid JSON', async () => {
        const event = {
            pathParameters: { id: '123' },
            body: 'invalid json',
            httpMethod: 'PUT',
            path: '/todos/123'
        };
        const result = await (0, update_todo_1.handler)(event);
        expect(result.statusCode).toBe(400);
        expect(JSON.parse(result.body).error).toBe('INVALID_JSON');
        expect(mockDynamoDb.send).not.toHaveBeenCalled();
    });
    it('should return 400 when no valid fields to update', async () => {
        const event = {
            pathParameters: { id: '123' },
            body: JSON.stringify({}),
            httpMethod: 'PUT',
            path: '/todos/123'
        };
        const result = await (0, update_todo_1.handler)(event);
        expect(result.statusCode).toBe(400);
        expect(JSON.parse(result.body).error).toBe('NO_UPDATES');
        expect(mockDynamoDb.send).not.toHaveBeenCalled();
    });
    it('should return 400 when title is empty string', async () => {
        const event = {
            pathParameters: { id: '123' },
            body: JSON.stringify({ title: '' }),
            httpMethod: 'PUT',
            path: '/todos/123'
        };
        const result = await (0, update_todo_1.handler)(event);
        expect(result.statusCode).toBe(400);
        expect(JSON.parse(result.body).error).toBe('INVALID_TITLE');
        expect(mockDynamoDb.send).not.toHaveBeenCalled();
    });
    it('should return 400 when completed is not boolean', async () => {
        const event = {
            pathParameters: { id: '123' },
            body: JSON.stringify({ completed: 'true' }),
            httpMethod: 'PUT',
            path: '/todos/123'
        };
        const result = await (0, update_todo_1.handler)(event);
        expect(result.statusCode).toBe(400);
        expect(JSON.parse(result.body).error).toBe('INVALID_COMPLETED');
        expect(mockDynamoDb.send).not.toHaveBeenCalled();
    });
    it('should return 404 when todo not found', async () => {
        const conditionalError = new Error('The conditional request failed');
        conditionalError.name = 'ConditionalCheckFailedException';
        mockDynamoDb.send.mockRejectedValueOnce(conditionalError);
        const event = {
            pathParameters: { id: '999' },
            body: JSON.stringify({ title: 'Updated Todo' }),
            httpMethod: 'PUT',
            path: '/todos/999'
        };
        const result = await (0, update_todo_1.handler)(event);
        expect(result.statusCode).toBe(404);
        expect(JSON.parse(result.body).error).toBe('TODO_NOT_FOUND');
        expect(mockDynamoDb.send).toHaveBeenCalledTimes(1);
    });
    it('should handle DynamoDB errors', async () => {
        mockDynamoDb.send.mockRejectedValueOnce(new Error('DynamoDB Error'));
        const event = {
            pathParameters: { id: '123' },
            body: JSON.stringify({ title: 'Updated Todo' }),
            httpMethod: 'PUT',
            path: '/todos/123'
        };
        const result = await (0, update_todo_1.handler)(event);
        expect(result.statusCode).toBe(500);
        expect(JSON.parse(result.body).error).toBe('DB_ERROR');
        expect(mockDynamoDb.send).toHaveBeenCalledTimes(1);
    });
    it('should update only description', async () => {
        const updatedTodo = {
            todoId: '123',
            description: 'New description',
            updatedAt: '2025-01-01T00:00:00.000Z'
        };
        mockDynamoDb.send.mockResolvedValueOnce({ Attributes: updatedTodo });
        const event = {
            pathParameters: { id: '123' },
            body: JSON.stringify({ description: 'New description' }),
            httpMethod: 'PUT',
            path: '/todos/123'
        };
        const result = await (0, update_todo_1.handler)(event);
        expect(result.statusCode).toBe(200);
        expect(JSON.parse(result.body).success).toBe(true);
        expect(mockDynamoDb.send).toHaveBeenCalledTimes(1);
    });
});
//# sourceMappingURL=data:application/json;base64,