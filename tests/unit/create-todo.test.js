"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_client_mock_1 = require("aws-sdk-client-mock");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const client_cloudwatch_1 = require("@aws-sdk/client-cloudwatch");
const create_todo_1 = require("../../src/lambda/handlers/create-todo");
const ddbMock = (0, aws_sdk_client_mock_1.mockClient)(lib_dynamodb_1.DynamoDBDocumentClient);
const cloudWatchMock = (0, aws_sdk_client_mock_1.mockClient)(client_cloudwatch_1.CloudWatchClient);
describe('create-todo handler', () => {
    beforeEach(() => {
        ddbMock.reset();
        cloudWatchMock.reset();
        ddbMock.on(lib_dynamodb_1.PutCommand).resolves({});
        cloudWatchMock.on(client_cloudwatch_1.PutMetricDataCommand).resolves({});
    });
    it('should create a todo successfully', async () => {
        const event = {
            body: JSON.stringify({
                title: 'Test Todo',
                description: 'Test Description'
            }),
            httpMethod: 'POST',
            path: '/todos'
        };
        const result = await (0, create_todo_1.handler)(event);
        expect(result.statusCode).toBe(201);
        expect(JSON.parse(result.body).success).toBe(true);
        expect(JSON.parse(result.body).data.title).toBe('Test Todo');
        expect(ddbMock.commandCalls(lib_dynamodb_1.PutCommand).length).toBe(1);
    });
    it('should return 400 when title is missing', async () => {
        const event = {
            body: JSON.stringify({}),
            httpMethod: 'POST',
            path: '/todos'
        };
        const result = await (0, create_todo_1.handler)(event);
        expect(result.statusCode).toBe(400);
        expect(JSON.parse(result.body).success).toBe(false);
        expect(JSON.parse(result.body).error).toBe('INVALID_TITLE');
    });
    it('should return 400 when body is invalid JSON', async () => {
        const event = {
            body: 'invalid json',
            httpMethod: 'POST',
            path: '/todos'
        };
        const result = await (0, create_todo_1.handler)(event);
        expect(result.statusCode).toBe(400);
        expect(JSON.parse(result.body).error).toBe('INVALID_JSON');
    });
    it('should return 400 when body is missing', async () => {
        const event = {
            body: null,
            httpMethod: 'POST',
            path: '/todos'
        };
        const result = await (0, create_todo_1.handler)(event);
        expect(result.statusCode).toBe(400);
        expect(JSON.parse(result.body).error).toBe('MISSING_BODY');
    });
    it('should handle DynamoDB errors', async () => {
        ddbMock.on(lib_dynamodb_1.PutCommand).rejects(new Error('DynamoDB Error'));
        const event = {
            body: JSON.stringify({
                title: 'Test Todo',
                description: 'Test Description'
            }),
            httpMethod: 'POST',
            path: '/todos'
        };
        const result = await (0, create_todo_1.handler)(event);
        expect(result.statusCode).toBe(500);
        expect(JSON.parse(result.body).success).toBe(false);
        expect(JSON.parse(result.body).error).toBe('INTERNAL_ERROR');
    });
});
//# sourceMappingURL=data:application/json;base64,