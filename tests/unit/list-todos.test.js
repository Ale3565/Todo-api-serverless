"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_client_mock_1 = require("aws-sdk-client-mock");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const client_cloudwatch_1 = require("@aws-sdk/client-cloudwatch");
const list_todos_1 = require("../../src/lambda/handlers/list-todos");
const ddbMock = (0, aws_sdk_client_mock_1.mockClient)(lib_dynamodb_1.DynamoDBDocumentClient);
const cloudWatchMock = (0, aws_sdk_client_mock_1.mockClient)(client_cloudwatch_1.CloudWatchClient);
describe('list-todos handler', () => {
    beforeEach(() => {
        ddbMock.reset();
        cloudWatchMock.reset();
        // Setup default CloudWatch mock
        cloudWatchMock.on(client_cloudwatch_1.PutMetricDataCommand).resolves({});
    });
    it('should list todos successfully', async () => {
        const mockTodos = [
            { todoId: '1', title: 'Todo 1', completed: false, createdAt: '2023-01-01T00:00:00.000Z' },
            { todoId: '2', title: 'Todo 2', completed: true, createdAt: '2023-01-02T00:00:00.000Z' }
        ];
        ddbMock.on(lib_dynamodb_1.ScanCommand).resolves({ Items: mockTodos });
        const event = {
            httpMethod: 'GET',
            path: '/todos'
        };
        const result = await (0, list_todos_1.handler)(event);
        expect(result.statusCode).toBe(200);
        expect(JSON.parse(result.body).success).toBe(true);
        expect(JSON.parse(result.body).data.todos).toHaveLength(2);
        expect(JSON.parse(result.body).data.count).toBe(2);
        expect(ddbMock.commandCalls(lib_dynamodb_1.ScanCommand).length).toBe(1);
    });
    it('should return empty array when no todos exist', async () => {
        ddbMock.on(lib_dynamodb_1.ScanCommand).resolves({ Items: [] });
        const event = {
            httpMethod: 'GET',
            path: '/todos'
        };
        const result = await (0, list_todos_1.handler)(event);
        expect(result.statusCode).toBe(200);
        expect(JSON.parse(result.body).success).toBe(true);
        expect(JSON.parse(result.body).data.todos).toHaveLength(0);
        expect(JSON.parse(result.body).data.count).toBe(0);
    });
    it('should handle DynamoDB errors', async () => {
        ddbMock.on(lib_dynamodb_1.ScanCommand).rejects(new Error('DynamoDB Error'));
        const event = {
            httpMethod: 'GET',
            path: '/todos'
        };
        const result = await (0, list_todos_1.handler)(event);
        expect(result.statusCode).toBe(500);
        expect(JSON.parse(result.body).error).toBe('INTERNAL_ERROR');
    });
    it('should sort todos by creation date (newest first)', async () => {
        const mockTodos = [
            { todoId: '1', title: 'Old Todo', completed: false, createdAt: '2023-01-01T00:00:00.000Z' },
            { todoId: '2', title: 'New Todo', completed: true, createdAt: '2023-01-03T00:00:00.000Z' },
            { todoId: '3', title: 'Middle Todo', completed: false, createdAt: '2023-01-02T00:00:00.000Z' }
        ];
        ddbMock.on(lib_dynamodb_1.ScanCommand).resolves({ Items: mockTodos });
        const event = {
            httpMethod: 'GET',
            path: '/todos'
        };
        const result = await (0, list_todos_1.handler)(event);
        const responseData = JSON.parse(result.body).data;
        expect(result.statusCode).toBe(200);
        expect(responseData.todos[0].title).toBe('New Todo');
        expect(responseData.todos[1].title).toBe('Middle Todo');
        expect(responseData.todos[2].title).toBe('Old Todo');
    });
});
//# sourceMappingURL=data:application/json;base64,