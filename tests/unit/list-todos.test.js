"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Set up environment first
process.env.NODE_ENV = 'test';
process.env.TABLE_NAME = 'TestTodos';
// Mock the DynamoDB and CloudWatch utilities
jest.mock('../../src/lambda/utils/dynamodb');
jest.mock('../../src/lambda/utils/cloudwatch');
const list_todos_1 = require("../../src/lambda/handlers/list-todos");
const dynamodb_1 = require("../../src/lambda/utils/dynamodb");
const cloudwatch_1 = require("../../src/lambda/utils/cloudwatch");
// Get mocked instances
const mockDynamoDb = dynamodb_1.dynamoDb;
const mockPublishMetric = cloudwatch_1.publishMetric;
describe('list-todos handler', () => {
    beforeEach(() => {
        // Reset all mocks
        jest.clearAllMocks();
        // Set up default mock behaviors
        mockPublishMetric.mockResolvedValue(undefined);
    });
    it('should list todos successfully', async () => {
        const mockTodos = [
            { todoId: '1', title: 'Todo 1', completed: false, createdAt: '2023-01-01T00:00:00.000Z' },
            { todoId: '2', title: 'Todo 2', completed: true, createdAt: '2023-01-02T00:00:00.000Z' }
        ];
        mockDynamoDb.send.mockResolvedValueOnce({ Items: mockTodos });
        const event = {
            httpMethod: 'GET',
            path: '/todos'
        };
        const result = await (0, list_todos_1.handler)(event);
        expect(result.statusCode).toBe(200);
        expect(JSON.parse(result.body).success).toBe(true);
        expect(JSON.parse(result.body).data.todos).toHaveLength(2);
        expect(JSON.parse(result.body).data.count).toBe(2);
        expect(mockDynamoDb.send).toHaveBeenCalledTimes(1);
        expect(mockPublishMetric).toHaveBeenCalledWith('TodosListedCount', 1);
    });
    it('should return empty array when no todos exist', async () => {
        mockDynamoDb.send.mockResolvedValueOnce({ Items: [] });
        const event = {
            httpMethod: 'GET',
            path: '/todos'
        };
        const result = await (0, list_todos_1.handler)(event);
        expect(result.statusCode).toBe(200);
        expect(JSON.parse(result.body).success).toBe(true);
        expect(JSON.parse(result.body).data.todos).toHaveLength(0);
        expect(JSON.parse(result.body).data.count).toBe(0);
        expect(mockDynamoDb.send).toHaveBeenCalledTimes(1);
    });
    it('should handle DynamoDB errors', async () => {
        mockDynamoDb.send.mockRejectedValueOnce(new Error('DynamoDB Error'));
        const event = {
            httpMethod: 'GET',
            path: '/todos'
        };
        const result = await (0, list_todos_1.handler)(event);
        expect(result.statusCode).toBe(500);
        expect(JSON.parse(result.body).error).toBe('DB_ERROR');
        expect(mockDynamoDb.send).toHaveBeenCalledTimes(1);
    });
    it('should sort todos by creation date (newest first)', async () => {
        const mockTodos = [
            { todoId: '1', title: 'Old Todo', completed: false, createdAt: '2023-01-01T00:00:00.000Z' },
            { todoId: '2', title: 'New Todo', completed: true, createdAt: '2023-01-03T00:00:00.000Z' },
            { todoId: '3', title: 'Middle Todo', completed: false, createdAt: '2023-01-02T00:00:00.000Z' }
        ];
        mockDynamoDb.send.mockResolvedValueOnce({ Items: mockTodos });
        const event = {
            httpMethod: 'GET',
            path: '/todos'
        };
        const result = await (0, list_todos_1.handler)(event);
        const responseData = JSON.parse(result.body).data;
        expect(result.statusCode).toBe(200);
        expect(responseData.todos[0].title).toBe('New Todo');
        expect(responseData.todos[1].title).toBe('Middle Todo');
        expect(responseData.todos[2].title).toBe('Old Todo');
        expect(mockDynamoDb.send).toHaveBeenCalledTimes(1);
    });
});
//# sourceMappingURL=data:application/json;base64,