"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Set up environment first
process.env.NODE_ENV = 'test';
process.env.TABLE_NAME = 'TestTodos';
// Mock the DynamoDB and CloudWatch utilities
jest.mock('../../src/lambda/utils/dynamodb');
jest.mock('../../src/lambda/utils/cloudwatch');
const delete_todo_1 = require("../../src/lambda/handlers/delete-todo");
const dynamodb_1 = require("../../src/lambda/utils/dynamodb");
const cloudwatch_1 = require("../../src/lambda/utils/cloudwatch");
// Get mocked instances
const mockDynamoDb = dynamodb_1.dynamoDb;
const mockPublishMetric = cloudwatch_1.publishMetric;
describe('delete-todo handler', () => {
    beforeEach(() => {
        // Reset all mocks
        jest.clearAllMocks();
        // Set up default mock behaviors
        mockPublishMetric.mockResolvedValue(undefined);
    });
    it('should delete todo successfully', async () => {
        // Configure mock for successful deletion
        mockDynamoDb.send.mockResolvedValueOnce({});
        const event = {
            pathParameters: { id: '123' },
            httpMethod: 'DELETE',
            path: '/todos/123'
        };
        const result = await (0, delete_todo_1.handler)(event);
        expect(result.statusCode).toBe(204);
        expect(result.body).toBe('');
        expect(mockDynamoDb.send).toHaveBeenCalledTimes(1);
        expect(mockPublishMetric).toHaveBeenCalledWith('TodoDeletedCount', 1);
    });
    it('should return 400 when id parameter is missing', async () => {
        const event = {
            pathParameters: null,
            httpMethod: 'DELETE',
            path: '/todos/123'
        };
        const result = await (0, delete_todo_1.handler)(event);
        expect(result.statusCode).toBe(400);
        expect(JSON.parse(result.body).error).toBe('MISSING_ID');
        expect(mockDynamoDb.send).not.toHaveBeenCalled();
    });
    it('should return 404 when todo not found', async () => {
        // Configure mock to simulate conditional check failure
        const conditionalError = new Error('The conditional request failed');
        conditionalError.name = 'ConditionalCheckFailedException';
        mockDynamoDb.send.mockRejectedValueOnce(conditionalError);
        const event = {
            pathParameters: { id: '999' },
            httpMethod: 'DELETE',
            path: '/todos/999'
        };
        const result = await (0, delete_todo_1.handler)(event);
        expect(result.statusCode).toBe(404);
        expect(JSON.parse(result.body).error).toBe('TODO_NOT_FOUND');
        expect(mockDynamoDb.send).toHaveBeenCalledTimes(1);
    });
    it('should handle DynamoDB errors', async () => {
        // Configure mock to simulate general DynamoDB error
        mockDynamoDb.send.mockRejectedValueOnce(new Error('DynamoDB Error'));
        const event = {
            pathParameters: { id: '123' },
            httpMethod: 'DELETE',
            path: '/todos/123'
        };
        const result = await (0, delete_todo_1.handler)(event);
        expect(result.statusCode).toBe(500);
        expect(JSON.parse(result.body).error).toBe('DB_ERROR');
        expect(mockDynamoDb.send).toHaveBeenCalledTimes(1);
    });
});
//# sourceMappingURL=data:application/json;base64,