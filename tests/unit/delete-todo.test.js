"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_client_mock_1 = require("aws-sdk-client-mock");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const client_cloudwatch_1 = require("@aws-sdk/client-cloudwatch");
const delete_todo_1 = require("../../src/lambda/handlers/delete-todo");
const ddbMock = (0, aws_sdk_client_mock_1.mockClient)(lib_dynamodb_1.DynamoDBDocumentClient);
const cloudWatchMock = (0, aws_sdk_client_mock_1.mockClient)(client_cloudwatch_1.CloudWatchClient);
describe('delete-todo handler', () => {
    beforeEach(() => {
        ddbMock.reset();
        cloudWatchMock.reset();
        ddbMock.on(lib_dynamodb_1.DeleteCommand).resolves({});
        cloudWatchMock.on(client_cloudwatch_1.PutMetricDataCommand).resolves({});
    });
    it('should delete todo successfully', async () => {
        const event = {
            pathParameters: { id: '123' },
            httpMethod: 'DELETE',
            path: '/todos/123'
        };
        const result = await (0, delete_todo_1.handler)(event);
        expect(result.statusCode).toBe(204);
        expect(result.body).toBe('');
        expect(ddbMock.commandCalls(lib_dynamodb_1.DeleteCommand).length).toBe(1);
    });
    it('should return 400 when id parameter is missing', async () => {
        const event = {
            pathParameters: null,
            httpMethod: 'DELETE',
            path: '/todos/123'
        };
        const result = await (0, delete_todo_1.handler)(event);
        expect(result.statusCode).toBe(400);
        expect(JSON.parse(result.body).error).toBe('MISSING_ID');
    });
    it('should return 404 when todo not found', async () => {
        const conditionalError = new Error('The conditional request failed');
        conditionalError.name = 'ConditionalCheckFailedException';
        ddbMock.on(lib_dynamodb_1.DeleteCommand).rejects(conditionalError);
        const event = {
            pathParameters: { id: '999' },
            httpMethod: 'DELETE',
            path: '/todos/999'
        };
        const result = await (0, delete_todo_1.handler)(event);
        expect(result.statusCode).toBe(404);
        expect(JSON.parse(result.body).error).toBe('NOT_FOUND');
    });
    it('should handle DynamoDB errors', async () => {
        ddbMock.on(lib_dynamodb_1.DeleteCommand).rejects(new Error('DynamoDB Error'));
        const event = {
            pathParameters: { id: '123' },
            httpMethod: 'DELETE',
            path: '/todos/123'
        };
        const result = await (0, delete_todo_1.handler)(event);
        expect(result.statusCode).toBe(500);
        expect(JSON.parse(result.body).error).toBe('INTERNAL_ERROR');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZXRlLXRvZG8udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRlbGV0ZS10b2RvLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw2REFBaUQ7QUFDakQsd0RBQThFO0FBQzlFLGtFQUFvRjtBQUVwRix1RUFBZ0U7QUFFaEUsTUFBTSxPQUFPLEdBQUcsSUFBQSxnQ0FBVSxFQUFDLHFDQUFzQixDQUFDLENBQUM7QUFDbkQsTUFBTSxjQUFjLEdBQUcsSUFBQSxnQ0FBVSxFQUFDLG9DQUFnQixDQUFDLENBQUM7QUFFcEQsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtJQUNuQyxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2hCLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUd2QixPQUFPLENBQUMsRUFBRSxDQUFDLDRCQUFhLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsY0FBYyxDQUFDLEVBQUUsQ0FBQyx3Q0FBb0IsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2RCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMvQyxNQUFNLEtBQUssR0FBa0M7WUFDM0MsY0FBYyxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRTtZQUM3QixVQUFVLEVBQUUsUUFBUTtZQUNwQixJQUFJLEVBQUUsWUFBWTtTQUNuQixDQUFDO1FBRUYsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLHFCQUFPLEVBQUMsS0FBNkIsQ0FBQyxDQUFDO1FBRTVELE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLDRCQUFhLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0QsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0RBQWdELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDOUQsTUFBTSxLQUFLLEdBQWtDO1lBQzNDLGNBQWMsRUFBRSxJQUFJO1lBQ3BCLFVBQVUsRUFBRSxRQUFRO1lBQ3BCLElBQUksRUFBRSxZQUFZO1NBQ25CLENBQUM7UUFFRixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUEscUJBQU8sRUFBQyxLQUE2QixDQUFDLENBQUM7UUFFNUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx1Q0FBdUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUVyRCxNQUFNLGdCQUFnQixHQUFHLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEUsZ0JBQXdCLENBQUMsSUFBSSxHQUFHLGlDQUFpQyxDQUFDO1FBQ25FLE9BQU8sQ0FBQyxFQUFFLENBQUMsNEJBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRXBELE1BQU0sS0FBSyxHQUFrQztZQUMzQyxjQUFjLEVBQUUsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFO1lBQzdCLFVBQVUsRUFBRSxRQUFRO1lBQ3BCLElBQUksRUFBRSxZQUFZO1NBQ25CLENBQUM7UUFFRixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUEscUJBQU8sRUFBQyxLQUE2QixDQUFDLENBQUM7UUFFNUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMxRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywrQkFBK0IsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM3QyxPQUFPLENBQUMsRUFBRSxDQUFDLDRCQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1FBRS9ELE1BQU0sS0FBSyxHQUFrQztZQUMzQyxjQUFjLEVBQUUsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFO1lBQzdCLFVBQVUsRUFBRSxRQUFRO1lBQ3BCLElBQUksRUFBRSxZQUFZO1NBQ25CLENBQUM7UUFFRixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUEscUJBQU8sRUFBQyxLQUE2QixDQUFDLENBQUM7UUFFNUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQy9ELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUElHYXRld2F5UHJveHlFdmVudCB9IGZyb20gJ2F3cy1sYW1iZGEnO1xyXG5pbXBvcnQgeyBtb2NrQ2xpZW50IH0gZnJvbSAnYXdzLXNkay1jbGllbnQtbW9jayc7XHJcbmltcG9ydCB7IER5bmFtb0RCRG9jdW1lbnRDbGllbnQsIERlbGV0ZUNvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9saWItZHluYW1vZGInO1xyXG5pbXBvcnQgeyBDbG91ZFdhdGNoQ2xpZW50LCBQdXRNZXRyaWNEYXRhQ29tbWFuZCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1jbG91ZHdhdGNoJztcclxuXHJcbmltcG9ydCB7IGhhbmRsZXIgfSBmcm9tICcuLi8uLi9zcmMvbGFtYmRhL2hhbmRsZXJzL2RlbGV0ZS10b2RvJztcclxuXHJcbmNvbnN0IGRkYk1vY2sgPSBtb2NrQ2xpZW50KER5bmFtb0RCRG9jdW1lbnRDbGllbnQpO1xyXG5jb25zdCBjbG91ZFdhdGNoTW9jayA9IG1vY2tDbGllbnQoQ2xvdWRXYXRjaENsaWVudCk7XHJcblxyXG5kZXNjcmliZSgnZGVsZXRlLXRvZG8gaGFuZGxlcicsICgpID0+IHtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIGRkYk1vY2sucmVzZXQoKTtcclxuICAgIGNsb3VkV2F0Y2hNb2NrLnJlc2V0KCk7XHJcbiAgICBcclxuICAgXHJcbiAgICBkZGJNb2NrLm9uKERlbGV0ZUNvbW1hbmQpLnJlc29sdmVzKHt9KTtcclxuICAgIGNsb3VkV2F0Y2hNb2NrLm9uKFB1dE1ldHJpY0RhdGFDb21tYW5kKS5yZXNvbHZlcyh7fSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgZGVsZXRlIHRvZG8gc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgZXZlbnQ6IFBhcnRpYWw8QVBJR2F0ZXdheVByb3h5RXZlbnQ+ID0ge1xyXG4gICAgICBwYXRoUGFyYW1ldGVyczogeyBpZDogJzEyMycgfSxcclxuICAgICAgaHR0cE1ldGhvZDogJ0RFTEVURScsXHJcbiAgICAgIHBhdGg6ICcvdG9kb3MvMTIzJ1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBoYW5kbGVyKGV2ZW50IGFzIEFQSUdhdGV3YXlQcm94eUV2ZW50KTtcclxuXHJcbiAgICBleHBlY3QocmVzdWx0LnN0YXR1c0NvZGUpLnRvQmUoMjA0KTtcclxuICAgIGV4cGVjdChyZXN1bHQuYm9keSkudG9CZSgnJyk7XHJcbiAgICBleHBlY3QoZGRiTW9jay5jb21tYW5kQ2FsbHMoRGVsZXRlQ29tbWFuZCkubGVuZ3RoKS50b0JlKDEpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIHJldHVybiA0MDAgd2hlbiBpZCBwYXJhbWV0ZXIgaXMgbWlzc2luZycsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGV2ZW50OiBQYXJ0aWFsPEFQSUdhdGV3YXlQcm94eUV2ZW50PiA9IHtcclxuICAgICAgcGF0aFBhcmFtZXRlcnM6IG51bGwsXHJcbiAgICAgIGh0dHBNZXRob2Q6ICdERUxFVEUnLFxyXG4gICAgICBwYXRoOiAnL3RvZG9zLzEyMydcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaGFuZGxlcihldmVudCBhcyBBUElHYXRld2F5UHJveHlFdmVudCk7XHJcblxyXG4gICAgZXhwZWN0KHJlc3VsdC5zdGF0dXNDb2RlKS50b0JlKDQwMCk7XHJcbiAgICBleHBlY3QoSlNPTi5wYXJzZShyZXN1bHQuYm9keSkuZXJyb3IpLnRvQmUoJ01JU1NJTkdfSUQnKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCByZXR1cm4gNDA0IHdoZW4gdG9kbyBub3QgZm91bmQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBcclxuICAgIGNvbnN0IGNvbmRpdGlvbmFsRXJyb3IgPSBuZXcgRXJyb3IoJ1RoZSBjb25kaXRpb25hbCByZXF1ZXN0IGZhaWxlZCcpO1xyXG4gICAgKGNvbmRpdGlvbmFsRXJyb3IgYXMgYW55KS5uYW1lID0gJ0NvbmRpdGlvbmFsQ2hlY2tGYWlsZWRFeGNlcHRpb24nO1xyXG4gICAgZGRiTW9jay5vbihEZWxldGVDb21tYW5kKS5yZWplY3RzKGNvbmRpdGlvbmFsRXJyb3IpO1xyXG5cclxuICAgIGNvbnN0IGV2ZW50OiBQYXJ0aWFsPEFQSUdhdGV3YXlQcm94eUV2ZW50PiA9IHtcclxuICAgICAgcGF0aFBhcmFtZXRlcnM6IHsgaWQ6ICc5OTknIH0sXHJcbiAgICAgIGh0dHBNZXRob2Q6ICdERUxFVEUnLFxyXG4gICAgICBwYXRoOiAnL3RvZG9zLzk5OSdcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaGFuZGxlcihldmVudCBhcyBBUElHYXRld2F5UHJveHlFdmVudCk7XHJcblxyXG4gICAgZXhwZWN0KHJlc3VsdC5zdGF0dXNDb2RlKS50b0JlKDQwNCk7XHJcbiAgICBleHBlY3QoSlNPTi5wYXJzZShyZXN1bHQuYm9keSkuZXJyb3IpLnRvQmUoJ05PVF9GT1VORCcpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGhhbmRsZSBEeW5hbW9EQiBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBkZGJNb2NrLm9uKERlbGV0ZUNvbW1hbmQpLnJlamVjdHMobmV3IEVycm9yKCdEeW5hbW9EQiBFcnJvcicpKTtcclxuXHJcbiAgICBjb25zdCBldmVudDogUGFydGlhbDxBUElHYXRld2F5UHJveHlFdmVudD4gPSB7XHJcbiAgICAgIHBhdGhQYXJhbWV0ZXJzOiB7IGlkOiAnMTIzJyB9LFxyXG4gICAgICBodHRwTWV0aG9kOiAnREVMRVRFJyxcclxuICAgICAgcGF0aDogJy90b2Rvcy8xMjMnXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGhhbmRsZXIoZXZlbnQgYXMgQVBJR2F0ZXdheVByb3h5RXZlbnQpO1xyXG5cclxuICAgIGV4cGVjdChyZXN1bHQuc3RhdHVzQ29kZSkudG9CZSg1MDApO1xyXG4gICAgZXhwZWN0KEpTT04ucGFyc2UocmVzdWx0LmJvZHkpLmVycm9yKS50b0JlKCdJTlRFUk5BTF9FUlJPUicpO1xyXG4gIH0pO1xyXG59KTsiXX0=