"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_client_mock_1 = require("aws-sdk-client-mock");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const client_cloudwatch_1 = require("@aws-sdk/client-cloudwatch");
const get_todo_1 = require("../../src/lambda/handlers/get-todo");
const ddbMock = (0, aws_sdk_client_mock_1.mockClient)(lib_dynamodb_1.DynamoDBDocumentClient);
const cloudWatchMock = (0, aws_sdk_client_mock_1.mockClient)(client_cloudwatch_1.CloudWatchClient);
describe('get-todo handler', () => {
    beforeEach(() => {
        ddbMock.reset();
        cloudWatchMock.reset();
        cloudWatchMock.on(client_cloudwatch_1.PutMetricDataCommand).resolves({});
    });
    it('should get a todo successfully', async () => {
        const mockTodo = {
            todoId: '123',
            title: 'Test Todo',
            completed: false,
            createdAt: '2023-01-01T00:00:00.000Z'
        };
        ddbMock.on(lib_dynamodb_1.GetCommand).resolves({ Item: mockTodo });
        const event = {
            pathParameters: { id: '123' },
            httpMethod: 'GET',
            path: '/todos/123'
        };
        const result = await (0, get_todo_1.handler)(event);
        expect(result.statusCode).toBe(200);
        expect(JSON.parse(result.body).success).toBe(true);
        expect(JSON.parse(result.body).data.todoId).toBe('123');
        expect(ddbMock.commandCalls(lib_dynamodb_1.GetCommand).length).toBe(1);
    });
    it('should return 404 when todo not found', async () => {
        ddbMock.on(lib_dynamodb_1.GetCommand).resolves({});
        const event = {
            pathParameters: { id: '999' },
            httpMethod: 'GET',
            path: '/todos/999'
        };
        const result = await (0, get_todo_1.handler)(event);
        expect(result.statusCode).toBe(404);
        expect(JSON.parse(result.body).error).toBe('NOT_FOUND');
    });
    it('should return 400 when id parameter is missing', async () => {
        const event = {
            pathParameters: null,
            httpMethod: 'GET',
            path: '/todos/123'
        };
        const result = await (0, get_todo_1.handler)(event);
        expect(result.statusCode).toBe(400);
        expect(JSON.parse(result.body).error).toBe('MISSING_ID');
    });
    it('should handle DynamoDB errors', async () => {
        ddbMock.on(lib_dynamodb_1.GetCommand).rejects(new Error('DynamoDB Error'));
        const event = {
            pathParameters: { id: '123' },
            httpMethod: 'GET',
            path: '/todos/123'
        };
        const result = await (0, get_todo_1.handler)(event);
        expect(result.statusCode).toBe(500);
        expect(JSON.parse(result.body).error).toBe('INTERNAL_ERROR');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXRvZG8udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdldC10b2RvLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw2REFBaUQ7QUFDakQsd0RBQTJFO0FBQzNFLGtFQUFvRjtBQUVwRixpRUFBNkQ7QUFFN0QsTUFBTSxPQUFPLEdBQUcsSUFBQSxnQ0FBVSxFQUFDLHFDQUFzQixDQUFDLENBQUM7QUFDbkQsTUFBTSxjQUFjLEdBQUcsSUFBQSxnQ0FBVSxFQUFDLG9DQUFnQixDQUFDLENBQUM7QUFFcEQsUUFBUSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtJQUNoQyxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2hCLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUd2QixjQUFjLENBQUMsRUFBRSxDQUFDLHdDQUFvQixDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGdDQUFnQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzlDLE1BQU0sUUFBUSxHQUFHO1lBQ2YsTUFBTSxFQUFFLEtBQUs7WUFDYixLQUFLLEVBQUUsV0FBVztZQUNsQixTQUFTLEVBQUUsS0FBSztZQUNoQixTQUFTLEVBQUUsMEJBQTBCO1NBQ3RDLENBQUM7UUFFRixPQUFPLENBQUMsRUFBRSxDQUFDLHlCQUFVLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUVwRCxNQUFNLEtBQUssR0FBa0M7WUFDM0MsY0FBYyxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRTtZQUM3QixVQUFVLEVBQUUsS0FBSztZQUNqQixJQUFJLEVBQUUsWUFBWTtTQUNuQixDQUFDO1FBRUYsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLGtCQUFPLEVBQUMsS0FBNkIsQ0FBQyxDQUFD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b3h5RXZlbnQgfSBmcm9tICdhd3MtbGFtYmRhJztcclxuaW1wb3J0IHsgbW9ja0NsaWVudCB9IGZyb20gJ2F3cy1zZGstY2xpZW50LW1vY2snO1xyXG5pbXBvcnQgeyBEeW5hbW9EQkRvY3VtZW50Q2xpZW50LCBHZXRDb21tYW5kIH0gZnJvbSAnQGF3cy1zZGsvbGliLWR5bmFtb2RiJztcclxuaW1wb3J0IHsgQ2xvdWRXYXRjaENsaWVudCwgUHV0TWV0cmljRGF0YUNvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtY2xvdWR3YXRjaCc7XHJcblxyXG5pbXBvcnQgeyBoYW5kbGVyIH0gZnJvbSAnLi4vLi4vc3JjL2xhbWJkYS9oYW5kbGVycy9nZXQtdG9kbyc7XHJcblxyXG5jb25zdCBkZGJNb2NrID0gbW9ja0NsaWVudChEeW5hbW9EQkRvY3VtZW50Q2xpZW50KTtcclxuY29uc3QgY2xvdWRXYXRjaE1vY2sgPSBtb2NrQ2xpZW50KENsb3VkV2F0Y2hDbGllbnQpO1xyXG5cclxuZGVzY3JpYmUoJ2dldC10b2RvIGhhbmRsZXInLCAoKSA9PiB7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBkZGJNb2NrLnJlc2V0KCk7XHJcbiAgICBjbG91ZFdhdGNoTW9jay5yZXNldCgpO1xyXG4gICAgXHJcbiBcclxuICAgIGNsb3VkV2F0Y2hNb2NrLm9uKFB1dE1ldHJpY0RhdGFDb21tYW5kKS5yZXNvbHZlcyh7fSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgZ2V0IGEgdG9kbyBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBtb2NrVG9kbyA9IHtcclxuICAgICAgdG9kb0lkOiAnMTIzJyxcclxuICAgICAgdGl0bGU6ICdUZXN0IFRvZG8nLFxyXG4gICAgICBjb21wbGV0ZWQ6IGZhbHNlLFxyXG4gICAgICBjcmVhdGVkQXQ6ICcyMDIzLTAxLTAxVDAwOjAwOjAwLjAwMFonXHJcbiAgICB9O1xyXG5cclxuICAgIGRkYk1vY2sub24oR2V0Q29tbWFuZCkucmVzb2x2ZXMoeyBJdGVtOiBtb2NrVG9kbyB9KTtcclxuXHJcbiAgICBjb25zdCBldmVudDogUGFydGlhbDxBUElHYXRld2F5UHJveHlFdmVudD4gPSB7XHJcbiAgICAgIHBhdGhQYXJhbWV0ZXJzOiB7IGlkOiAnMTIzJyB9LFxyXG4gICAgICBodHRwTWV0aG9kOiAnR0VUJyxcclxuICAgICAgcGF0aDogJy90b2Rvcy8xMjMnXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGhhbmRsZXIoZXZlbnQgYXMgQVBJR2F0ZXdheVByb3h5RXZlbnQpO1xyXG5cclxuICAgIGV4cGVjdChyZXN1bHQuc3RhdHVzQ29kZSkudG9CZSgyMDApO1xyXG4gICAgZXhwZWN0KEpTT04ucGFyc2UocmVzdWx0LmJvZHkpLnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XHJcbiAgICBleHBlY3QoSlNPTi5wYXJzZShyZXN1bHQuYm9keSkuZGF0YS50b2RvSWQpLnRvQmUoJzEyMycpO1xyXG4gICAgZXhwZWN0KGRkYk1vY2suY29tbWFuZENhbGxzKEdldENvbW1hbmQpLmxlbmd0aCkudG9CZSgxKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCByZXR1cm4gNDA0IHdoZW4gdG9kbyBub3QgZm91bmQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBkZGJNb2NrLm9uKEdldENvbW1hbmQpLnJlc29sdmVzKHt9KTtcclxuXHJcbiAgICBjb25zdCBldmVudDogUGFydGlhbDxBUElHYXRld2F5UHJveHlFdmVudD4gPSB7XHJcbiAgICAgIHBhdGhQYXJhbWV0ZXJzOiB7IGlkOiAnOTk5JyB9LFxyXG4gICAgICBodHRwTWV0aG9kOiAnR0VUJyxcclxuICAgICAgcGF0aDogJy90b2Rvcy85OTknXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGhhbmRsZXIoZXZlbnQgYXMgQVBJR2F0ZXdheVByb3h5RXZlbnQpO1xyXG5cclxuICAgIGV4cGVjdChyZXN1bHQuc3RhdHVzQ29kZSkudG9CZSg0MDQpO1xyXG4gICAgZXhwZWN0KEpTT04ucGFyc2UocmVzdWx0LmJvZHkpLmVycm9yKS50b0JlKCdOT1RfRk9VTkQnKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCByZXR1cm4gNDAwIHdoZW4gaWQgcGFyYW1ldGVyIGlzIG1pc3NpbmcnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBldmVudDogUGFydGlhbDxBUElHYXRld2F5UHJveHlFdmVudD4gPSB7XHJcbiAgICAgIHBhdGhQYXJhbWV0ZXJzOiBudWxsLFxyXG4gICAgICBodHRwTWV0aG9kOiAnR0VUJyxcclxuICAgICAgcGF0aDogJy90b2Rvcy8xMjMnXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGhhbmRsZXIoZXZlbnQgYXMgQVBJR2F0ZXdheVByb3h5RXZlbnQpO1xyXG5cclxuICAgIGV4cGVjdChyZXN1bHQuc3RhdHVzQ29kZSkudG9CZSg0MDApO1xyXG4gICAgZXhwZWN0KEpTT04ucGFyc2UocmVzdWx0LmJvZHkpLmVycm9yKS50b0JlKCdNSVNTSU5HX0lEJyk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgaGFuZGxlIER5bmFtb0RCIGVycm9ycycsIGFzeW5jICgpID0+IHtcclxuICAgIGRkYk1vY2sub24oR2V0Q29tbWFuZCkucmVqZWN0cyhuZXcgRXJyb3IoJ0R5bmFtb0RCIEVycm9yJykpO1xyXG5cclxuICAgIGNvbnN0IGV2ZW50OiBQYXJ0aWFsPEFQSUdhdGV3YXlQcm94eUV2ZW50PiA9IHtcclxuICAgICAgcGF0aFBhcmFtZXRlcnM6IHsgaWQ6ICcxMjMnIH0sXHJcbiAgICAgIGh0dHBNZXRob2Q6ICdHRVQnLFxyXG4gICAgICBwYXRoOiAnL3RvZG9zLzEyMydcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaGFuZGxlcihldmVudCBhcyBBUElHYXRld2F5UHJveHlFdmVudCk7XHJcblxyXG4gICAgZXhwZWN0KHJlc3VsdC5zdGF0dXNDb2RlKS50b0JlKDUwMCk7XHJcbiAgICBleHBlY3QoSlNPTi5wYXJzZShyZXN1bHQuYm9keSkuZXJyb3IpLnRvQmUoJ0lOVEVSTkFMX0VSUk9SJyk7XHJcbiAgfSk7XHJcbn0pOyJdfQ==